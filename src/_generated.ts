/**
 * This file was automatically generated by fastify-extract-definitions.
 * DO NOT MODIFY IT BY HAND. Instead, modify the fastify routes schemas
 * and re-run project to regenerate this file.
 */

import {
  ContextConfigDefault,
  FastifyInstance,
  FastifyLoggerInstance,
  FastifyRequest,
  FastifySchema,
  FastifyTypeProvider,
  FastifyTypeProviderDefault,
  RawReplyDefaultExpression,
  RawRequestDefaultExpression,
  RawServerBase,
  RawServerDefault,
} from 'fastify';
import { FastifyReply } from 'fastify/types/reply';
import { RouteGenericInterface } from 'fastify/types/route';
import {
  FastifyRequestType,
  ResolveFastifyRequestType,
} from 'fastify/types/type-provider';

export type RouteHandlerMethod<
  RawServer extends RawServerBase = RawServerDefault,
  RawRequest extends RawRequestDefaultExpression<RawServer> = RawRequestDefaultExpression<RawServer>,
  RawReply extends RawReplyDefaultExpression<RawServer> = RawReplyDefaultExpression<RawServer>,
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault,
  SchemaCompiler extends FastifySchema = FastifySchema,
  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault,
  RequestType extends FastifyRequestType = ResolveFastifyRequestType<
    TypeProvider,
    SchemaCompiler,
    RouteGeneric
  >,
  Logger extends FastifyLoggerInstance = FastifyLoggerInstance,
> = (
  this: FastifyInstance<RawServer, RawRequest, RawReply, Logger, TypeProvider>,
  request: FastifyRequest<
    RouteGeneric,
    RawServer,
    RawRequest,
    SchemaCompiler,
    TypeProvider,
    ContextConfig,
    Logger,
    RequestType
  >,
  reply: FastifyReply<
    RawServer,
    RawRequest,
    RawReply,
    RouteGeneric,
    ContextConfig,
    SchemaCompiler,
    TypeProvider,
    RouteGeneric['Reply']
  >,
) => Promise<RouteGeneric['Reply']> | RouteGeneric['Reply'] | void;

export type Handler<
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault,
> = RouteHandlerMethod<
  RawServerDefault,
  RawRequestDefaultExpression,
  RawReplyDefaultExpression,
  RouteGeneric,
  ContextConfig
>;

export type PublicationGetReply = PublicationGetReplyStatus200;

export type PublicationGetReplyStatus200 = {
  id?: number;
  title?: string;
  description?: string;
  status?: 'public' | 'private';
  tagids?: number[];
}[];

export type PublicationPostReply =
  | PublicationPostReplyStatus201
  | PublicationPostReplyStatus400
  | PublicationPostReplyStatus404;

export type PublicationIdGetReply =
  | PublicationIdGetReplyStatus200
  | PublicationIdGetReplyStatus400
  | PublicationIdGetReplyStatus404;

export type PublicationIdPutReply =
  | PublicationIdPutReplyStatus200
  | PublicationIdPutReplyStatus400
  | PublicationIdPutReplyStatus404;

export type PublicationIdDeleteReply = PublicationIdDeleteReplyStatus200;

export type TagsGetReply = TagsGetReplyStatus200;

export type TagsGetReplyStatus200 = {
  id?: number;
  title?: string;
}[];

export type TagsPostReply = TagsPostReplyStatus201;

export interface API {
  '/publication': {
    GET: PublicationGet;
    POST: PublicationPost;
  };
  '/publication/:id': {
    GET: PublicationIdGet;
    PUT: PublicationIdPut;
    DELETE: PublicationIdDelete;
  };
  '/tags': {
    GET: TagsGet;
    POST: TagsPost;
  };
}

export interface PublicationGet {
  Reply: PublicationGetReply;
}

export interface PublicationPost {
  Body: PublicationPostBody;
  Reply: PublicationPostReply;
}

export interface PublicationPostBody {
  title: string;
  description: string;
  status: 'public' | 'private';
  tagids?: number[];
}

export interface PublicationPostReplyStatus201 {
  id: number;
  title: string;
  description: string;
  status: 'public' | 'private';
  tagids?: number[];
}

export interface PublicationPostReplyStatus400 {
  error?: string;
}

export interface PublicationPostReplyStatus404 {
  error?: string;
}

export interface PublicationIdGet {
  Params: PublicationIdGetParams;
  Reply: PublicationIdGetReply;
}

export interface PublicationIdGetParams {
  id: string;
}

export interface PublicationIdGetReplyStatus200 {
  id?: number;
  title?: string;
  description?: string;
  status?: 'public' | 'private';
  tagids?: number[];
}

export interface PublicationIdGetReplyStatus400 {
  error?: string;
}

export interface PublicationIdGetReplyStatus404 {
  error?: string;
}

export interface PublicationIdPut {
  Body: PublicationIdPutBody;
  Params: PublicationIdPutParams;
  Reply: PublicationIdPutReply;
}

export interface PublicationIdPutBody {
  title?: string;
  description?: string;
  status?: 'public' | 'private';
  tagids?: number[];
}

export interface PublicationIdPutParams {
  id: string;
}

export interface PublicationIdPutReplyStatus200 {
  id?: number;
  title?: string;
  description?: string;
  status?: 'public' | 'private';
  tagids?: number[];
}

export interface PublicationIdPutReplyStatus400 {
  error?: string;
}

export interface PublicationIdPutReplyStatus404 {
  error?: string;
}

export interface PublicationIdDelete {
  Params: PublicationIdDeleteParams;
  Reply: PublicationIdDeleteReply;
}

export interface PublicationIdDeleteParams {
  id: string;
}

export interface PublicationIdDeleteReplyStatus200 {
  id?: number;
}

export interface TagsGet {
  Reply: TagsGetReply;
}

export interface TagsPost {
  Body: TagsPostBody;
  Reply: TagsPostReply;
}

export interface TagsPostBody {
  title: string;
}

export interface TagsPostReplyStatus201 {
  id?: number;
  title?: string;
}
